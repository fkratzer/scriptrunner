import com.atlassian.jira.ComponentManager
import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.issue.fields.CustomField
import com.atlassian.jira.user.ApplicationUser
import com.atlassian.jira.issue.comments.CommentManager
import com.atlassian.jira.issue.comments.Comment
import com.atlassian.jira.issue.IssueManager
import com.atlassian.jira.issue.Issue
import com.atlassian.jira.issue.MutableIssue
import com.atlassian.jira.issue.link.IssueLink
import com.atlassian.jira.issue.link.IssueLinkType
import com.atlassian.jira.issue.link.IssueLinkManager
import com.atlassian.jira.issue.link.IssueLinkTypeManager
import com.atlassian.jira.event.type.EventDispatchOption
import com.atlassian.jira.issue.search.SearchException
import com.atlassian.jira.bc.issue.search.SearchService
import com.atlassian.jira.issue.search.SearchResults
import org.apache.log4j.Logger
import org.apache.log4j.Level
 
def log = Logger.getLogger("com.acme.createComment")
log.setLevel(Level.DEBUG)
  
def componentManager = ComponentManager.getInstance()

def userManager = ComponentAccessor.getUserManager()

IssueManager issueManager = ComponentAccessor.getIssueManager()
Issue issue = event.issue as Issue     
IssueLinkManager issueLinkManager = ComponentAccessor.getIssueLinkManager();
MutableIssue missue = issue as MutableIssue;
log.info issue

def reporter = issue.getReporter() as ApplicationUser
def mentioned = userManager.getUserByKey("secops").key
def searchString = mentioned as String

log.info "Search Phrase: " + mentioned
String commenthold = "" as String
Integer results = 0
// check that mention has not already been made in comments to eliminate multiple tickets
	CommentManager commentManager = ComponentAccessor.commentManager
    def comments = commentManager.getComments(issue)
if (comments){
    log.info "Results: " + comments
    comments.each { comment ->
       
        log.info "Comment: " + comment.body
        if (comment.body.contains(searchString)){
        results = results + 1
    	}
	}

}
     
log.info "Results: " + results

def author = comments.last().authorApplicationUser.getUsername() 
log.info "Comment made by: " + author
commenthold = comments.last().getBody() as String

log.info "Comment: " + commenthold as String


if (commenthold.contains(mentioned) && results == 1)
{

 // Create Issue in INFOSEC
def PROJECT_KEY_TO = "INFOSEC"
def issueFactory = ComponentAccessor.getIssueFactory()  
def projectTo = ComponentAccessor.getProjectManager().getProjectByCurrentKey(PROJECT_KEY_TO)    

def newIssue = issueFactory.cloneIssue(issue)
newIssue.setProjectObject(projectTo) 
newIssue.setSummary("Cloned from: " + missue.getKey() + " " + missue.summary)
log.info "Cloned from: " + missue.getKey() + " " + missue.summary
newIssue.setAssigneeId(mentioned) 

Map<String,Object> newIssueParams = ["issue":newIssue] as Map<String,Object>
issueManager.createIssueObject(author, newIssueParams)  
   
     
    def newComment = "Hello [~$author] new Issue " + newIssue + " has automatically been raised in " + projectTo + "."
    log.info "New Comment: " + newComment 
    
    commentManager.create(missue, reporter, newComment, true)
    log.info "Reporter: " + reporter
    log.info "Author: " + author 
    issueManager.updateIssue(reporter, missue, EventDispatchOption.ISSUE_UPDATED, true)
       

    issueLinkManager.createIssueLink(missue.getId(), newIssue.getId(), 10141, 1, reporter);

}


return;
